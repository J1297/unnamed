map $host $username {
  ~^(?P<user>.+)$ $user;
}

map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}

map $status $loggable {
    ~^[23]  0;
    default 1;
}

upstream wordpress.local {
    least_conn;
    # simple load balancing
    server 127.0.0.1;
    server 127.0.0.2;
    server 127.0.0.3;
}

# redirect all http traffic to https
server {
    listen 80 default_server;
    listen [::]:80 default_server;
    server_name wordpress.local www.wordpress.local;

    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    set $app_root /var/www/app/;

    server_name ~^(?<app>.+)\.wordpress\.local$;

    root /var/www/app/$app;
    index index.php;

    include conf.d/basic.conf;

    # Logs
    rewrite_log on;
    # access_log /var/log/nginx/access.log combined if=$loggable;
    access_log off;
    error_log /var/log/nginx/error.log warn;

    etag off;

    ssl on;
    # .crt
    ssl_certificate /etc/ssl/certs/wordpress.local.cert.pem;
    ssl_certificate_key /etc/ssl/certs/wordpress.local.cert.key;

    # enable session resumption to improve https performance
    # http://vincent.bernat.im/en/blog/2011-ssl-session-reuse-rfc5077.html
    ssl_session_tickets off;

    # Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits
    ssl_dhparam /etc/ssl/certs/wordpress.local.dhparam.pem;

    # enables server-side protection from BEAST attacks
    # http://blog.ivanristic.com/2013/09/is-beast-still-a-threat.html
    ssl_prefer_server_ciphers on;
    # disable SSLv3(enabled by default since nginx 0.8.19) since it's less secure then TLS http://en.wikipedia.org/wiki/Secure_Sockets_Layer#SSL_3.0
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    # ciphers chosen for forward secrecy and compatibility
    # http://blog.ivanristic.com/2013/08/configuring-apache-nginx-and-openssl-for-forward-secrecy.html
    ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';

    # enable ocsp stapling (mechanism by which a site can convey certificate revocation information to visitors in a privacy-preserving, scalable manner)
    # http://blog.mozilla.org/security/2013/07/29/ocsp-stapling-in-firefox/
    resolver 8.8.8.8 8.8.4.4;
    ssl_stapling off;
    ssl_stapling_verify off;
    # .crt
    ssl_trusted_certificate /etc/ssl/certs/wordpress.local.cert.pem;

    # config to enable HSTS(HTTP Strict Transport Security) https://developer.mozilla.org/en-US/docs/Security/HTTP_Strict_Transport_Security
    # to avoid ssl stripping https://en.wikipedia.org/wiki/SSL_stripping#SSL_stripping
    # also https://hstspreload.org/
   # add_header Strict-Transport-Security "max-age=31536000"; includeSubdomains; preload;

    # HSTS (HTTP Strict Transport Security)
    # This header tells browsers to cache the certificate for a year and to connect exclusively via HTTPS.
    add_header Strict-Transport-Security "max-age=31536000;";
    # This version tells browsers to treat all subdomains the same as this site and to load exclusively over HTTPS
    add_header Strict-Transport-Security "max-age=31536000; includeSubdomains;";
    # Optimize SSL by caching session parameters for 10 minutes. This cuts down on the number of expensive SSL handshakes.
    # The handshake is the most CPU-intensive operation, and by default it is re-negotiated on every new/parallel connection.
    # By enabling a cache (of type "shared between all Nginx workers"), we tell the client to re-use the already negotiated state.
    # Further optimization can be achieved by raising keepalive_timeout, but that shouldn't be done unless you serve primarily HTTPS.
    ssl_session_cache    shared:SSL:50m; # a 1mb cache can hold about 4000 sessions, so we can hold 40000 sessions
    ssl_session_timeout  24h;

    # SSL buffer size was added in 1.5.9
    ssl_buffer_size      1400; # 1400 bytes to fit in one MTU

    #############
    # Add trailing slash to */wp-admin requests.
    ############

    rewrite /wp-admin$ $scheme://$host$uri/ permanent;
    # Attempt to rewrite wordpress in sub directory
    rewrite ^/wp/([_0-9a-zA-Z-]+)/(xmlrpc\.php|wp-[0-9a-z-]+\.php) /wp/$2;
    rewrite ^/wp/([_0-9a-zA-Z-]+)/(wp-(admin|content|includes).*) /wp/$2;

    location = /favicon.ico {
        log_not_found off;
        access_log off;
    }

    location = /robots.txt {
        allow all;
        log_not_found off;
        access_log off;
    }

    location / {
      # This is cool because no php is touched for static content.
      # include the "?$args" part so non-default permalinks doesn't break when using query string
      try_files $uri $uri/ /index.php?$args;
    }

    location ~* /wp-includes/.*.php$ {
        deny all;
        access_log off;
        log_not_found off;
    }
    location ~* /wp-content/.*.php$ {
    	deny all;
    	access_log off;
    	log_not_found off;
    }
    location ~* /(?:uploads|files)/.*.php$ {
    	deny all;
    	access_log off;
    	log_not_found off;
    }
    location = /xmlrpc.php {
    	deny all;
    	access_log off;
    	log_not_found off;
    }
    location  ~ \.php$ {
        root /var/www/app/;

        fastcgi_split_path_info ^(.+?\.php)(/.*)$;

        fastcgi_pass    php:9000;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        include         fastcgi_params;
        fastcgi_index index.php;

        # for debugging 1h
        fastcgi_buffers 16 16k;
        fastcgi_buffer_size 32k;

        proxy_buffering off;

        proxy_connect_timeout  3600s;
        proxy_send_timeout  3600s;
        proxy_read_timeout  3600s;
        fastcgi_send_timeout 3600s;
        fastcgi_read_timeout 3600s;
    }

    location ~* \.(jpg|jpeg|gif|png|css|js|ico|xml)$ {
        access_log        off;
        log_not_found     off;
        expires           360d;
    }

    location ~ /\. {
        access_log off;
        log_not_found off;
        deny all;
    }
}
